/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mypackage;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot; // Import PiePlot class
//import org.jfree.data.general.DefaultPieDataset;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;


import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author ASUS
 */
public class Dashboard extends javax.swing.JFrame {

    /**
     * Creates new form Dashboard
     */
    public Dashboard() {
        initComponents();
        addPieChart();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    
    private void addPieChart() {
       // Initialize the dataset for the pie chart
// DefaultPieDataset dataset = new DefaultPieDataset();
//
//    // Database query to count tasks by status
//    String query = "SELECT status, COUNT(*) AS count FROM tasks GROUP BY status";
//
//    // Database connection and query execution
//    try (Connection conn = new DatabaseConnection().getConnection();
//         Statement stmt = conn.createStatement();
//         ResultSet rs = stmt.executeQuery(query)) {
//
//        // Loop through the result set and populate the dataset
//        while (rs.next()) {
//            String status = rs.getString("status");
//            int count = rs.getInt("count");
//
//            // Add the status and its count to the dataset
//            dataset.setValue(status + " (" + count + ")", count);
//        }
//    } catch (Exception e) {
//        e.printStackTrace(); // Handle exceptions
//    }
//
//    // Create the pie chart using the dataset
//    JFreeChart pieChart = ChartFactory.createPieChart(
//        "Task Status Distribution",  // Chart title
//        dataset,                    // Dataset
//        true,                       // Include legend
//        true,                       // Include tooltips
//        false                       // Exclude URLs
//    );
//
//    // Get the plot and set custom colors
//    PiePlot plot = (PiePlot) pieChart.getPlot();
//
//    // Set colors based on status (you can modify the condition if needed)
//    plot.setSectionPaint("Completed", new java.awt.Color(104,69,117)); // Purple
//    plot.setSectionPaint("Pending", new java.awt.Color(221, 160, 221)); // Light Purple
//
//    // Set the label generator to include the count in the labels
//    plot.setLabelGenerator(new StandardPieSectionLabelGenerator("{0} ({2})"));
//
//    // Create a ChartPanel and add it to the piepanel
//    ChartPanel chartPanel = new ChartPanel(pieChart);
//    chartPanel.setBounds(0, 0, piepanel.getWidth(), piepanel.getHeight());
//    piepanel.setLayout(null); // Ensure absolute positioning
//    piepanel.add(chartPanel);
//    piepanel.validate(); // Refresh the panel


DefaultPieDataset dataset = new DefaultPieDataset();

    // Database query to count tasks by status
    String query = "SELECT status, COUNT(*) AS count FROM tasks GROUP BY status";

    // Database connection and query execution
    try (Connection conn = new DatabaseConnection().getConnection();
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(query)) {

        // Loop through the result set and populate the dataset
        while (rs.next()) {
            String status = rs.getString("status");
            int count = rs.getInt("count");

            // Add the status and its count to the dataset
            dataset.setValue(status + " (" + count + ")", count);
        }
    } catch (Exception e) {
        e.printStackTrace(); // Handle exceptions
    }

    // Create the pie chart using the dataset
    JFreeChart pieChart = ChartFactory.createPieChart(
        "Task Status Distribution",  // Chart title
        dataset,                    // Dataset
        true,                       // Include legend
        true,                       // Include tooltips
        false                       // Exclude URLs
    );

    // Get the plot and set custom colors
    PiePlot plot = (PiePlot) pieChart.getPlot();

    // Set the label generator to include the count in the labels
    plot.setLabelGenerator(new StandardPieSectionLabelGenerator("{0} ({2})"));

    // Turn off default coloring by setting custom colors for all sections
    plot.setSectionPaint("Completed (", new java.awt.Color(104, 69, 117)); // Purple
    plot.setSectionPaint("Pending (", new java.awt.Color(221, 160, 221)); // Light Purple
    plot.setSectionPaint("In Progress (", new java.awt.Color(102, 205, 170)); // Medium Sea Green
    // Add other status colors as necessary

    // Disable the default section paint by setting the color explicitly for each status
    plot.setSectionPaint("default", new java.awt.Color(255, 255, 255)); // White (or any placeholder color)

    // Create a ChartPanel and add it to the piepanel
    ChartPanel chartPanel = new ChartPanel(pieChart);
    chartPanel.setBounds(0, 0, piepanel.getWidth(), piepanel.getHeight());
    piepanel.setLayout(null); // Ensure absolute positioning
    piepanel.add(chartPanel);
    piepanel.validate(); // Refresh the panel
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        piepanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        piepanel.setBackground(new java.awt.Color(153, 0, 153));
        piepanel.setEnabled(false);

        javax.swing.GroupLayout piepanelLayout = new javax.swing.GroupLayout(piepanel);
        piepanel.setLayout(piepanelLayout);
        piepanelLayout.setHorizontalGroup(
            piepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 330, Short.MAX_VALUE)
        );
        piepanelLayout.setVerticalGroup(
            piepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 280, Short.MAX_VALUE)
        );

        getContentPane().add(piepanel);
        piepanel.setBounds(60, 160, 330, 280);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mypackage/dashboard.jpg"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, -40, 1050, 710);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Dashboard dashbaord = new Dashboard();
                dashbaord.setSize(790, 790); // Set the size of the JFrame to 790x790
                dashbaord.setLocationRelativeTo(null); // Center the JFrame on the screen
                dashbaord.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel piepanel;
    // End of variables declaration//GEN-END:variables
}
