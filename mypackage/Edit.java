/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package mypackage;
import javax.swing.*;
//import javax.swing.table.DefaultTableModel;
import java.sql.*;
//import javax.swing.JComboBox;
/**
 *
 * @author ASUS
 */
public class Edit extends javax.swing.JFrame {
 int taskId;
    String status;
    String priority;
    /**
     * Creates new form Edit
     */
    public Edit(int id) {
   this.taskId = id;
        initComponents();
        loadTaskData();
    }
private void loadTaskData() {
    // Create DatabaseConnection object
    DatabaseConnection dbConnection = new DatabaseConnection();

    try {
        // Get the connection from DatabaseConnection
        Connection conn = dbConnection.getConnection();

        // Prepare the query to fetch task data
        String query = "SELECT * FROM tasks WHERE id = ?";
        PreparedStatement pst = conn.prepareStatement(query);
        pst.setInt(1, taskId);  // Set the taskId for the query

        ResultSet rs = pst.executeQuery();
        if (rs.next()) {
            // Populate the form with the data from the database
            titlefield.setText(rs.getString("title"));
            Descfield.setText(rs.getString("description"));
            DueDatefield.setText(rs.getString("due_date"));

            // Populate the status and priority lists (adjust according to your database)
            String status = rs.getString("status");
            String priority = rs.getString("priority");

            // Set selected status and priority
//            statuslist.setSelectedValue(status, true);
//            prioritylist.setSelectedValue(priority, true);
        }

        // Close the resources
        rs.close();
        pst.close();
        conn.close();
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error fetching data: " + ex.getMessage());
    }
}
private void saveChanges() {
    String title = titlefield.getText();
    String description = Descfield.getText();
    String dueDate = DueDatefield.getText();
   
//    String status = statuslist.getSelectedValue();
//    String priority = prioritylist.getSelectedValue();

    // Create DatabaseConnection object
    DatabaseConnection dbConnection = new DatabaseConnection();

    try {
        // Get the connection from DatabaseConnection
        Connection conn = dbConnection.getConnection();
        if (conn == null) {
            JOptionPane.showMessageDialog(this, "Database connection failed!");
            return;
        }

        // Prepare the query to update the task
        String query = "UPDATE tasks SET title = ?, description = ?, due_date = ?, status = ?, priority = ? WHERE id = ?";
PreparedStatement pst = conn.prepareStatement(query);

// Ensure these methods are setting the correct data
pst.setString(1, title);
pst.setString(2, description);
pst.setString(3, dueDate);
pst.setString(4, status);
pst.setString(5, priority);
pst.setInt(6, taskId);  // Verify taskId has the correct valueUse the taskId to identify the record to update
System.out.println("Query: " + query);
System.out.println("Parameters: " + title + ", " + description + ", " + dueDate + ", " + status + ", " + priority + ", " + taskId);

        // Log the query for debugging
        System.out.println("Executing query: " + pst.toString());

        // Execute the update
        int rowsUpdated = pst.executeUpdate();
        if (rowsUpdated > 0) {
            JOptionPane.showMessageDialog(this, "Task updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "No task found with the given ID.");
        }

        // Close the resources
        pst.close();
        conn.close();
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error saving changes: " + ex.getMessage());
        ex.printStackTrace(); // Print the exception details for debugging
    }
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titlefield = new javax.swing.JTextField();
        statuslist = new javax.swing.JComboBox<>();
        prioritylist = new javax.swing.JComboBox<>();
        savebtn = new javax.swing.JButton();
        DueDatefield = new javax.swing.JTextField();
        backbtn = new javax.swing.JButton();
        descriptionfield = new javax.swing.JScrollPane();
        Descfield = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jTextField3 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        titlefield.setBackground(new java.awt.Color(255, 249, 249));
        titlefield.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        getContentPane().add(titlefield);
        titlefield.setBounds(450, 260, 420, 40);

        statuslist.setBackground(new java.awt.Color(255, 249, 249));
        statuslist.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        statuslist.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pending", "Completed" }));
        statuslist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statuslistActionPerformed(evt);
            }
        });
        getContentPane().add(statuslist);
        statuslist.setBounds(450, 612, 420, 30);

        prioritylist.setBackground(new java.awt.Color(255, 249, 249));
        prioritylist.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        prioritylist.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Low", "Medium", "High" }));
        prioritylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prioritylistActionPerformed(evt);
            }
        });
        getContentPane().add(prioritylist);
        prioritylist.setBounds(450, 450, 420, 30);

        savebtn.setBackground(new java.awt.Color(104, 69, 117));
        savebtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        savebtn.setForeground(new java.awt.Color(255, 249, 249));
        savebtn.setText("Save");
        savebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savebtnActionPerformed(evt);
            }
        });
        getContentPane().add(savebtn);
        savebtn.setBounds(480, 720, 160, 40);

        DueDatefield.setBackground(new java.awt.Color(255, 249, 249));
        DueDatefield.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        DueDatefield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DueDatefieldActionPerformed(evt);
            }
        });
        getContentPane().add(DueDatefield);
        DueDatefield.setBounds(450, 530, 420, 30);

        backbtn.setBackground(new java.awt.Color(104, 69, 117));
        backbtn.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        backbtn.setForeground(new java.awt.Color(255, 249, 249));
        backbtn.setText("Back");
        backbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtnActionPerformed(evt);
            }
        });
        getContentPane().add(backbtn);
        backbtn.setBounds(290, 720, 160, 40);

        Descfield.setBackground(new java.awt.Color(255, 249, 249));
        Descfield.setColumns(20);
        Descfield.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Descfield.setRows(5);
        descriptionfield.setViewportView(Descfield);

        getContentPane().add(descriptionfield);
        descriptionfield.setBounds(450, 320, 420, 80);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mypackage/editfinal.jpg"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, -140, 1170, 1070);

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(610, 400, 48, 146);

        jTextField3.setText("jTextField3");
        getContentPane().add(jTextField3);
        jTextField3.setBounds(620, 560, 73, 22);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DueDatefieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DueDatefieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DueDatefieldActionPerformed

    private void backbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtnActionPerformed
        // TODO add your handling code here:

 this.dispose();
    home homeFrame = new home();
    homeFrame.setSize(1170,800); // Optional: Set size if not already set in the 'home' class
    homeFrame.setLocationRelativeTo(null); // Center the JFrame on the screen
    homeFrame.setVisible(true);
 
    }//GEN-LAST:event_backbtnActionPerformed

    private void savebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savebtnActionPerformed
        // TODO add your handling code here:
           
        saveChanges();  // Call the saveChanges method when the Save button is clicked
    
    }//GEN-LAST:event_savebtnActionPerformed

    private void prioritylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prioritylistActionPerformed
        // TODO add your handling code here:
JComboBox<String> cb = (JComboBox<String>) evt.getSource();
                priority = (String) cb.getSelectedItem();
    }//GEN-LAST:event_prioritylistActionPerformed

    private void statuslistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statuslistActionPerformed
        // TODO add your handling code here:
        JComboBox<String> cb = (JComboBox<String>) evt.getSource();
                status = (String) cb.getSelectedItem();
    }//GEN-LAST:event_statuslistActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                int newidd=2;
                new Edit(newidd).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Descfield;
    private javax.swing.JTextField DueDatefield;
    private javax.swing.JButton backbtn;
    private javax.swing.JScrollPane descriptionfield;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JComboBox<String> prioritylist;
    private javax.swing.JButton savebtn;
    private javax.swing.JComboBox<String> statuslist;
    private javax.swing.JTextField titlefield;
    // End of variables declaration//GEN-END:variables
}
